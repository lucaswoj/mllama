from _typeshed import Incomplete
from typing import Callable, Iterable, NamedTuple

class TokenTrieStats(NamedTuple):
    tokenids: Incomplete
    trienodes: Incomplete
    trieleaves: Incomplete
    triedepth: Incomplete

class TokenTrie:
    children: Incomplete
    ids: int
    def __init__(self) -> None: ...
    def insert_all(self, vocabulary: Iterable[tuple[int, str]]): ...
    def insert(self, token, _id) -> None: ...
    def insert_ids(self, token, ids) -> None: ...
    def collect_ids(self) -> set[int]: ...
    def dfs(self, prefix: str = '') -> Iterable[tuple[str, int]]: ...
    def map(self, map_fn: Callable[[str, int], str]) -> TokenTrie: ...
    def max_depth(self) -> int: ...
    def stats(self) -> TokenTrieStats: ...
