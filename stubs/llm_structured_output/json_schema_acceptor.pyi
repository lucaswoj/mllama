from .acceptor import (
    SequenceAcceptor as SequenceAcceptor,
    StateMachineAcceptor as StateMachineAcceptor,
    TextAcceptor as TextAcceptor,
    TokenAcceptor as TokenAcceptor,
    WaitForAcceptor as WaitForAcceptor,
)
from .json_acceptor import (
    ArrayAcceptor as ArrayAcceptor,
    BooleanAcceptor as BooleanAcceptor,
    NullAcceptor as NullAcceptor,
    NumberAcceptor as NumberAcceptor,
    ObjectAcceptor as ObjectAcceptor,
    StringAcceptor as StringAcceptor,
    StringConstantAcceptor as StringConstantAcceptor,
    WhitespaceAcceptor as WhitespaceAcceptor,
    prepare_json_acceptor_tries as prepare_json_acceptor_tries,
)
from .util.tokentrie import TokenTrie as TokenTrie
from _typeshed import Incomplete
from typing import Iterable

class SchemaNotImplementedError(Exception): ...
class InvalidSchemaError(Exception): ...

def ConstSchemaAcceptor(schema: dict): ...

class EnumSchemaAcceptor(StateMachineAcceptor):
    def __init__(self, schema: dict) -> None: ...

class StringSchemaAcceptor(StringAcceptor):
    schema: Incomplete
    def __init__(self, schema: dict = None) -> None: ...
    def min_length(self): ...
    def max_length(self): ...
    def validate_value(self, value): ...

    class Cursor(StringAcceptor.Cursor):
        acceptor: Incomplete
        def __init__(self, acceptor) -> None: ...
        def start_transition(self, transition_acceptor, target_state): ...
        def complete_transition(self, transition_value, target_state, is_end_state): ...

class NumberSchemaAcceptor(NumberAcceptor):
    schema: Incomplete
    is_integer: Incomplete
    requires_validation: Incomplete
    def __init__(self, schema) -> None: ...
    def validate_value(self, value): ...

    class Cursor(NumberAcceptor.Cursor):
        acceptor: Incomplete
        def __init__(self, acceptor) -> None: ...
        def prune(self, trie): ...
        def start_transition(self, transition_acceptor, target_state): ...
        def complete_transition(self, transition_value, target_state, is_end_state): ...

class ArraySchemaAcceptor(ArrayAcceptor):
    schema: Incomplete
    context: Incomplete
    def __init__(self, schema, context) -> None: ...
    def get_edges(self, state): ...
    def min_items(self) -> int: ...
    def max_items(self) -> int: ...

    class Cursor(ArrayAcceptor.Cursor):
        acceptor: Incomplete
        def __init__(self, acceptor) -> None: ...
        def start_transition(self, transition_acceptor, target_state) -> bool: ...

class ObjectSchemaAcceptor(ObjectAcceptor):
    schema: Incomplete
    context: Incomplete
    properties: Incomplete
    required_property_names: Incomplete
    def __init__(self, schema, context) -> None: ...
    def get_edges(self, state): ...

    class Cursor(ObjectAcceptor.Cursor):
        acceptor: Incomplete
        def __init__(self, acceptor) -> None: ...
        def start_transition(self, transition_acceptor, target_state) -> bool: ...

    class PropertyAcceptor(ObjectAcceptor.PropertyAcceptor):
        prop_name: Incomplete
        prop_schema: Incomplete
        prop_context: Incomplete
        def __init__(self, prop_name, prop_schema, context) -> None: ...

        class Cursor(ObjectAcceptor.PropertyAcceptor.Cursor):
            acceptor: Incomplete
            def __init__(self, acceptor) -> None: ...
            def complete_transition(
                self, transition_value, target_state, is_end_state
            ) -> bool: ...
            def get_value(self): ...

class AnyOfAcceptor(StateMachineAcceptor):
    def __init__(self, schemas: list[dict], context) -> None: ...

def merged(dict1, dict2): ...

class DefinitionNotFoundError(Exception):
    def __init__(self, ref: str) -> None: ...

def resolve_subschemas(schema, defs, visited_refs) -> list: ...

class UnknownSchemaTypeError(Exception):
    def __init__(self, schema) -> None: ...

def JsonSchemaAcceptor(schema, context: Incomplete | None = None): ...
def EncapsulatedJsonSchemaAcceptor(schema): ...

class JsonSchemaAcceptorDriver:
    class TokenRejected(Exception): ...
    class CharacterRejected(Exception): ...

    @classmethod
    def driver_factory_for_model(
        cls, vocabulary: Iterable[tuple[int, str]], eos_id: int
    ) -> callable: ...
    vocabulary: Incomplete
    trie: Incomplete
    eos_id: Incomplete
    acceptor: Incomplete
    cursors: Incomplete
    debug_max_cursors: int
    def __init__(
        self,
        vocabulary_dict: dict[int, str],
        vocabulary_trie: TokenTrie,
        eos_id: int,
        schema: dict,
        is_encapsulated_json: bool = False,
    ) -> None: ...
    def in_accepted_state(self) -> bool: ...
    def select_valid_tokens(self) -> int: ...
    def debug_select_valid_tokens(self, debug_output_fn=...) -> int: ...
    def advance_token(self, token) -> None: ...
    def debug_advance_token(self, token, debug_output_fn=...) -> None: ...
    def advance_char(self, char) -> None: ...
    def get_current_value_paths(self): ...
