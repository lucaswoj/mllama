from .acceptor import (
    AcceptedState as AcceptedState,
    CharAcceptor as CharAcceptor,
    SequenceAcceptor as SequenceAcceptor,
    StateMachineAcceptor as StateMachineAcceptor,
    TextAcceptor as TextAcceptor,
    TokenAcceptor as TokenAcceptor,
)
from .util.tokentrie import TokenTrie as TokenTrie
from _typeshed import Incomplete

class WhitespaceTokenTrie(TokenTrie):
    @classmethod
    def from_trie(cls, trie, whitespace_charset): ...

class WhitespaceAcceptor(TokenAcceptor):
    WHITESPACE: str
    @classmethod
    def prepare_trie(cls, trie: TokenTrie): ...
    max_whitespace: Incomplete
    def __init__(self, max_whitespace: int = 40) -> None: ...
    def get_cursors(self): ...

    class Cursor(TokenAcceptor.Cursor):
        acceptor: Incomplete
        text: Incomplete
        length_exceeded: Incomplete
        def __init__(self, acceptor, text: str = "") -> None: ...
        def select(self, candidate_chars): ...
        def prune(self, trie): ...
        def advance(self, char): ...
        def get_value(self): ...

class BooleanAcceptor(StateMachineAcceptor):
    def __init__(self) -> None: ...

    class Cursor(StateMachineAcceptor.Cursor):
        value: Incomplete
        def __init__(self, acceptor) -> None: ...
        def complete_transition(self, transition_value, target_state, is_end_state): ...
        def get_value(self): ...
        def is_in_value(self): ...

class NullAcceptor(TextAcceptor):
    def __init__(self) -> None: ...

    class Cursor(TextAcceptor.Cursor):
        def is_in_value(self): ...

DigitAcceptor: Incomplete
HexDigitAcceptor: Incomplete

class StringCharTokenTrie(TokenTrie):
    @classmethod
    def from_trie(cls, trie): ...

class StringCharAcceptor(TokenAcceptor):
    INVALID_CHARS: Incomplete
    @classmethod
    def prepare_trie(cls, trie: TokenTrie): ...

    class Cursor(TokenAcceptor.Cursor):
        acceptor: Incomplete
        value: Incomplete
        def __init__(self, acceptor, value: Incomplete | None = None) -> None: ...
        def select(self, candidate_chars): ...
        def prune(self, trie): ...
        def advance(self, char): ...
        def get_value(self): ...

class StringAcceptor(StateMachineAcceptor):
    STATES: Incomplete
    def __init__(self) -> None: ...

    class Cursor(StateMachineAcceptor.Cursor):
        text: str
        length: int
        value: Incomplete
        def __init__(self, acceptor) -> None: ...
        def complete_transition(self, transition_value, target_state, is_end_state): ...
        def get_value(self): ...
        def is_in_value(self): ...

class StringConstantAcceptor(TextAcceptor):
    string: Incomplete
    def __init__(self, string: str) -> None: ...

    class Cursor(TextAcceptor.Cursor):
        def get_value(self) -> str: ...
        def is_in_value(self): ...

class NumberTokenTrie(TokenTrie):
    @classmethod
    def from_trie(cls, trie): ...

class NumberAcceptor(StateMachineAcceptor):
    STATES: Incomplete
    @classmethod
    def prepare_trie(cls, trie: TokenTrie): ...
    def __init__(self) -> None: ...

    class Cursor(StateMachineAcceptor.Cursor):
        text: str
        value: Incomplete
        def __init__(self, acceptor) -> None: ...
        def prune(self, trie): ...
        def complete_transition(self, transition_value, target_state, is_end_state): ...
        def get_value(self): ...
        def is_in_value(self): ...

class ArrayAcceptor(StateMachineAcceptor):
    def __init__(self) -> None: ...
    def get_edges(self, state): ...

    class Cursor(StateMachineAcceptor.Cursor):
        value: Incomplete
        def __init__(self, acceptor) -> None: ...
        def clone(self): ...
        def complete_transition(
            self, transition_value, target_state, is_end_state
        ) -> bool: ...
        def get_value_path(self): ...

class ObjectAcceptor(StateMachineAcceptor):
    def __init__(self) -> None: ...
    def get_edges(self, state): ...

    class Cursor(StateMachineAcceptor.Cursor):
        value: Incomplete
        def __init__(self, acceptor) -> None: ...
        def complete_transition(
            self, transition_value, target_state, is_end_state
        ) -> bool: ...
        def get_value(self): ...

    class PropertyAcceptor(SequenceAcceptor):
        def __init__(self, graph: Incomplete | None = None) -> None: ...

        class Cursor(SequenceAcceptor.Cursor):
            prop_name: Incomplete
            prop_value: Incomplete
            def __init__(self, acceptor) -> None: ...
            def complete_transition(
                self, transition_value, target_state, is_end_state
            ) -> bool: ...
            def get_value(self): ...
            def is_in_value(self): ...
            def get_value_path(self): ...

class JsonAcceptor(StateMachineAcceptor):
    def get_edges(self, state): ...

def prepare_json_acceptor_tries(trie: TokenTrie): ...
